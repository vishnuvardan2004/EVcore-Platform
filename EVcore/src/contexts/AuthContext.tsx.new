import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { apiService } from '../services/api';
import { useToast } from '../hooks/use-toast';
import { config } from '../config/environment';

// User type definition
interface User {
  email: string;
  role: 'super_admin' | 'admin' | 'employee' | 'pilot';
  permissions?: string[];
}

// Auth context interface
interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<boolean>;
  logout: () => Promise<void>;
  isAuthenticated: boolean;
  isLoading: boolean;
  userEmail: string | undefined;
  userRole: string | undefined;
  hasRole: (role: string) => boolean;
  hasPermission: (permission: string) => boolean;
  hasPermissions: (permissions: string[]) => boolean;
  canAccessFeature: (featureId: string) => boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();

  // Check for existing token on mount
  useEffect(() => {
    const initializeAuth = async () => {
      console.log('üîÑ Initializing authentication...');
      const token = localStorage.getItem(config.TOKEN_STORAGE_KEY);

      if (!token) {
        console.log('‚ö†Ô∏è No token found, user not authenticated');
        setIsLoading(false);
        return;
      }

      try {
        console.log('üîç Token found, attempting to validate...');
        setUser(null);

        // Check if token is JWT format (3 parts)
        if (token.split('.').length === 3) {
          console.log('‚úÖ JWT format detected, validating with API...');
          try {
            // Validate token with backend
            const response = await apiService.auth.refreshToken();
            if (response.success) {
              console.log('‚úÖ Token validated with backend');
              const payload = JSON.parse(atob(token.split('.')[1]));
              setUser({ email: payload.email, role: payload.role });
            } else {
              throw new Error('Token validation failed');
            }
          } catch (apiError) {
            console.log('‚ùå API validation failed, clearing token');
            localStorage.removeItem(config.TOKEN_STORAGE_KEY);
            localStorage.removeItem(config.REFRESH_TOKEN_STORAGE_KEY);
          }
        } else {
          console.log('‚ùå Invalid token format, clearing');
          localStorage.removeItem(config.TOKEN_STORAGE_KEY);
          localStorage.removeItem(config.REFRESH_TOKEN_STORAGE_KEY);
        }
      } catch (error) {
        console.error('‚ùå Token processing error, clearing all auth data:', error);
        localStorage.removeItem(config.TOKEN_STORAGE_KEY);
        localStorage.removeItem(config.REFRESH_TOKEN_STORAGE_KEY);
      } finally {
        setIsLoading(false);
      }
    };

    initializeAuth();
  }, []);

  // Development helpers for debugging
  const clearAuthState = () => {
    console.log('üßπ Clearing all authentication state...');
    localStorage.removeItem(config.TOKEN_STORAGE_KEY);
    localStorage.removeItem(config.REFRESH_TOKEN_STORAGE_KEY);
    setUser(null);
    console.log('‚úÖ Authentication state cleared');
  };

  const createExpiredToken = () => {
    console.log('‚è∞ Creating expired token for testing...');
    const expiredToken = btoa(JSON.stringify({ 
      email: 'test@example.com', 
      role: 'admin', 
      exp: Date.now() - 3600000 // 1 hour ago
    }));
    localStorage.setItem(config.TOKEN_STORAGE_KEY, expiredToken);
  };

  const checkTokenStatus = () => {
    const token = localStorage.getItem('authToken');
    console.log('üîç Token status check:', {
      tokenExists: !!token,
      tokenLength: token ? token.length : 0,
      tokenPreview: token ? token.substring(0, 50) + '...' : 'No token'
    });
  };

  // Make development helpers available globally
  if (config.IS_DEVELOPMENT) {
    (window as any).clearAuthState = clearAuthState;
    (window as any).createExpiredToken = createExpiredToken;
    (window as any).checkTokenStatus = checkTokenStatus;
  }

  const login = async (email: string, password: string): Promise<boolean> => {
    try {
      console.log('üîê Attempting API login for:', email);
      
      // Try API login - NO MOCK FALLBACK
      const response = await apiService.auth.login({ email, password });
      
      console.log('‚úÖ API login response:', response);
      
      if (response.success) {
        localStorage.setItem(config.TOKEN_STORAGE_KEY, response.data.token);
        setUser(response.data.user);
        toast({
          title: "Welcome back!",
          description: `Successfully logged in as ${response.data.user.role.replace('-', ' ')}`,
        });
        return true;
      }
    } catch (error) {
      console.error('‚ùå API login failed:', error);
      
      // Show the actual API error - NO MOCK FALLBACK
      toast({
        title: "Login Failed",
        description: error instanceof Error ? error.message : "Invalid credentials. Please check your email and password.",
        variant: "destructive",
      });
      
      return false;
    }
    
    console.log('‚ùå Login failed: Authentication rejected');
    return false;
  };

  const logout = async () => {
    try {
      // Try to logout from backend API
      await apiService.auth.logout();
    } catch (error) {
      console.log('API logout failed, proceeding with local logout');
    }
    
    // Clear local storage
    localStorage.removeItem(config.TOKEN_STORAGE_KEY);
    localStorage.removeItem(config.REFRESH_TOKEN_STORAGE_KEY);
    
    // Clear session storage as well
    sessionStorage.removeItem(config.TOKEN_STORAGE_KEY);
    sessionStorage.removeItem(config.REFRESH_TOKEN_STORAGE_KEY);
    
    setUser(null);
    
    toast({
      title: "Logged out",
      description: "You have been successfully logged out.",
    });
  };

  // Role-based access control functions
  const hasRole = (role: string): boolean => {
    return user?.role === role;
  };

  const hasPermission = (permission: string): boolean => {
    if (!user) return false;
    
    // Super admin has all permissions
    if (user.role === 'super_admin' || user.role === 'admin') return true;
    
    // For other roles, check specific permissions
    return user.permissions?.includes(permission) || false;
  };

  const hasPermissions = (permissions: string[]): boolean => {
    if (!user) return false;
    
    // Super admin has all permissions
    if (user.role === 'super_admin' || user.role === 'admin') return true;
    
    // Check if user has all required permissions
    return permissions.every(permission => user.permissions?.includes(permission));
  };

  // Feature access control - define which roles can access which features
  const canAccessFeature = (featureId: string): boolean => {
    if (!user) return false;
    
    const roleFeatureAccess: Record<string, string[]> = {
      super_admin: ['all'], // Super admin can access everything
      admin: ['dashboard', 'employees', 'vehicles', 'reports', 'settings'],
      employee: ['dashboard', 'vehicles', 'reports'],
      pilot: ['dashboard', 'vehicles', 'trips']
    };

    return roleFeatureAccess[user.role]?.includes(featureId) || 
           roleFeatureAccess[user.role]?.includes('all') || 
           false;
  };

  const isAuthenticated = user !== null;

  const value: AuthContextType = {
    user,
    login,
    logout,
    isAuthenticated,
    isLoading,
    userEmail: user?.email,
    userRole: user?.role,
    hasRole,
    hasPermission,
    hasPermissions,
    canAccessFeature,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
